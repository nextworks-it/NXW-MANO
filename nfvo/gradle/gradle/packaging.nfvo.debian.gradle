/*
 * Copyright (c) 2016 Open Baton (http://www.openbaton.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

ext {
    debianApplicationVersionFull = "${applicationVersionFull}".replaceAll("-", ".")

    baseName = 'openbaton'
    componentName = "nfvo"
    fullName = "${baseName}-${componentName}"
    propertiesDir = '/etc/openbaton'
    baseBinaryDir = '/usr/lib/openbaton'
    jarSubpathName = "${componentName}".replaceAll("-", "/")
}

task makedeb(type: Deb, dependsOn: [jar, build]) { 
    packageName = (applicationRelease) ? "${fullName}" : "${fullName}-nightly"
    version = debianApplicationVersionFull
    //release = 1 
    priority = 'optional'
    arch = 'all'
    maintainer = 'Open Baton Team <dev@openbaton.org>'
    vendor = 'Open Source (Implemented by Fraunhofer FOKUS and TUB)'
    license = 'Apache 2.0 License'
    url = 'http://openbaton.github.io/index.html'
    summary = 'Open Baton NFV Orchestrator (NFVO)'
    packageDescription = 'The Network Function Virtualization Orchestrator (NFVO) is a component of the Open Baton project which is an ETSI compliant implementation of a NFV Management and Orchestration (MANO) System'

    preInstall file('gradle/gradle/scripts/debian/preinst')
    postInstall file('gradle/gradle/scripts/debian/postinst')
    preUninstall file('gradle/gradle/scripts/debian/prerm')
    postUninstall file('gradle/gradle/scripts/debian/postrm')

    requires('openjdk-7-jre')
    requires('rabbitmq-server')
    requires('openbaton-plugin-vimdriver-test')

    // Copy files from "from path" to "into path" 
    from("etc/keystore.p12") 			                                { into "/etc/openbaton/" }                              // keystore file
    from("etc/openbaton.properties") {                                                                                          // properties file
        into "${propertiesDir}" 
        rename("openbaton.properties", "${fullName}.properties")
    }
    from(jar.outputs.files) {                                                                                                   // jar file
        into "${baseBinaryDir}/${jarSubpathName}"
        rename("(.*)","${fullName}-${version}.jar")
    }
    from("gradle/gradle/scripts/${fullName}") 	                        { into "/usr/bin/"}                                     // executable to run the Component
    from("gradle/gradle/scripts/${fullName}") 	                        { into "/etc/init.d/"}                                  // executable to run the Component as a service (SysV)
    from("gradle/gradle/scripts/${fullName}.conf") 	                    { into "/etc/init/"}                                    // conf file to run the Component as a service (Upstart)
    from("gradle/gradle/scripts/systemd/${fullName}.service") 	        { into "/usr/lib/systemd/system/"}                      // executable to run the Component as a service (Systemd)
    from("gradle/gradle/scripts/systemd/${fullName}.env") 	            { into "/usr/lib/openbaton/systemd/env/"}               // environment file to run the Component as a service (Systemd)
    from("gradle/gradle/scripts/systemd/${fullName}.preexecstart") 	    { into "/usr/lib/openbaton/systemd/preexecstart/"}      // preexecstart file to run the Component as a service (Systemd)
}
