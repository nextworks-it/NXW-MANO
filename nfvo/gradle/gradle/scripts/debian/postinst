#!/bin/sh

# Copyright (c) 2016 Open Baton (http://www.openbaton.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions

# Set the soft limit for max open file desciptors
ulimit -S -n 4096


##########################
#### Global Variables ####
##########################

OPENBATON_COMPONENT_NAME_FANCY="NFV Orchestrator (NFVO)"
OPENBATON_COMPONENT_NAME=nfvo

OPENBATON_BASE_DIR=/usr
OPENBATON_COMPONENT_EXE_DIR=${OPENBATON_BASE_DIR}/bin
OPENBATON_PLUGINS_DIR=${OPENBATON_BASE_DIR}/lib/openbaton/plugins

OPENBATON_BASE_CONFIG_DIR=/etc/openbaton
OPENBATON_COMPONENT_CONFIG_FILE=openbaton-${OPENBATON_COMPONENT_NAME}.properties

CONFIGURE_RABBITMQ_FOR_OPENBATON_DEFAULT=true
CONFIGURE_RABBITMQ_FOR_OPENBATON=${CONFIGURE_RABBITMQ_FOR_OPENBATON:-$CONFIGURE_RABBITMQ_FOR_OPENBATON_DEFAULT}

OPENBATON_COMPONENT_AUTOSTART_DEFAULT=true
OPENBATON_COMPONENT_AUTOSTART=${OPENBATON_COMPONENT_AUTOSTART:-$OPENBATON_COMPONENT_AUTOSTART_DEFAULT}

DEBIAN_FRONTEND_DEFAULT=interactive
DEBIAN_FRONTEND=${DEBIAN_FRONTEND:-$DEBIAN_FRONTEND_DEFAULT}


##################
#### RabbitMQ ####
##################

configure_rabbitmq () {
    # TODO: check rabbitmq-server is started
    #if rabbitmq is running
        result=$(rabbitmqctl list_users | grep '^admin' | wc -l)
    	if [ ${result} -eq 0 ]; then
            rabbitmqctl add_user admin openbaton
            rabbitmqctl set_user_tags admin administrator
            rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
        fi
        
        #### Workaround to enable rabbitmq management plugin ####
	    if [ -f /etc/rabbitmq/enabled_plugins ]; then
            result=$(grep /etc/rabbitmq/enabled_plugins -e "[rabbitmq_management].")
    	    if [ "${result}" != "[rabbitmq_management]." ]; then
                echo "[rabbitmq_management]." >> /etc/rabbitmq/enabled_plugins
    	    fi
        else
	        echo "[rabbitmq_management]." > /etc/rabbitmq/enabled_plugins
        fi
        ##########################################################
        
        service rabbitmq-server restart
        if [ "$?" != "0" ]; then
            log_failure_msg "rabbitmq is not running properly (check the problem in /var/log/rabbitmq)"
            exit 1
        fi
    #fi    

    # In case of "noninteractive" FRONTEND the default value will remain valid (rabbit ip: localhost ; rabbit mgmt port: 15672)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
    	read -p "Enter the rabbitmq broker ip [localhost]: " broker_ip
    	export broker_ip=${broker_ip}
    	if [ "${broker_ip}" != "" ]; then
            log_success_msg "Setting new broker ip: ${broker_ip}"
	        sed -i "s/nfvo.rabbit.brokerIp=localhost/nfvo.rabbit.brokerIp=${broker_ip}/g" /etc/openbaton/openbaton-${OPENBATON_COMPONENT_NAME}.properties
        fi

    	read -p "Enter the rabbitmq management port [15672]: " management_port
    	export management_port=${management_port}
    	if [ "${management_port}" != "" ]; then
            log_success_msg "Setting new management port: ${management_port}"
	        sed -i "s/nfvo.rabbit.management.port=15672/nfvo.rabbit.management.port=${management_port}/g" /etc/openbaton/openbaton-${OPENBATON_COMPONENT_NAME}.properties
    	fi
    fi
}


####################
#### Open Baton ####
####################

set_plugins_folder () {
    export OPENBATON_PLUGINS_DIR="${OPENBATON_PLUGINS_DIR}"
    sed -i "s~nfvo.plugin.installation-dir=./plugins~nfvo.plugin.installation-dir="${OPENBATON_PLUGINS_DIR}"~" /etc/openbaton/openbaton-${OPENBATON_COMPONENT_NAME}.properties
}

set_password () {
    # In case of "noninteractive" FRONTEND the default value will remain valid (user: admin ; password: openbaton)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        # Turning echo on and off between password reading
        stty -echo
        read -p "Provide the new password for 'admin' user of Open Baton: " openbatonpswd ; echo
        stty echo
        if [ "${openbatonpswd}" != "" ]; then
            export openbatonpswd=${openbatonpswd}
            stty -echo
            read -p "Repeat the password: " openbatonpswd2 ; echo
            stty echo
            export openbatonpswd2=${openbatonpswd2}
            if [ "${openbatonpswd}" = "${openbatonpswd2}" ]; then
                sed -i "s/# nfvo.security.admin.password\ =\ openbaton/nfvo.security.admin.password\ =\ $openbatonpswd/g" /etc/openbaton/openbaton-${OPENBATON_COMPONENT_NAME}.properties
                return
            fi
        else
            set_password
        fi
    fi
}

configure_new_installation () {
    log_success_msg "Configuring Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation .."
    # Allow the use of the .deb package to install Open Baton with Docker (because of issues when installing and configuring RabbitMQ during a docker image build) 
    if [ "${CONFIGURE_RABBITMQ_FOR_OPENBATON}" = "true" ]; then
        configure_rabbitmq
    fi
    set_plugins_folder
    set_password
    chmod a+x ${OPENBATON_COMPONENT_EXE_DIR}/openbaton-${OPENBATON_COMPONENT_NAME}
    log_success_msg "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation completed"
}

configure_for_upgrade () {
    if [ -f "/tmp/${OPENBATON_COMPONENT_CONFIG_FILE}" ]; then
        log_success_msg "Configuring Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation .."
        mv /tmp/${OPENBATON_COMPONENT_CONFIG_FILE} ${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_COMPONENT_CONFIG_FILE}
        log_success_msg "Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} installation completed"
    else
        configure_new_installation # fix for backward compatibility as there is no old file to copy from /tmp
    fi
}


start_component () {
    # Allow the use of the .deb package to install Open Baton with Docker (the Docker file developer need to manage the starting of the NFVO in the Docker file) 
    if [ "${OPENBATON_COMPONENT_AUTOSTART}" = "true" ]; then
        if systemctl start openbaton-${OPENBATON_COMPONENT_NAME}.service >/dev/null 2>&1 ; then
            log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
        elif start openbaton-${OPENBATON_COMPONENT_NAME} >/dev/null 2>&1 ; then
           log_success_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY} .."
        else 
            log_failure_msg "Starting the Open Baton ${OPENBATON_COMPONENT_NAME_FANCY}"
        fi
    fi
}


##############
#### Main ####
##############

case "${1}" in
    configure)
        if [ "${2}" = "" ]; then # new installation
            configure_new_installation
        else # upgrade
            configure_for_upgrade
        fi 
        ;;

    remove|purge|failed-upgrade|abort-install|abort-upgrade|disappear)
        ;;

    *)
        log_failure_msg "postinst called with unknown argument ${1}"
        exit 1
        ;;
esac

start_component

exit 0
